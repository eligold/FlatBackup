#!/usr/bin/env python3
import logging, os, traceback
from multiprocessing import Process, Pipe, set_start_method
from queue import SimpleQueue, Empty, Full
from v4l2py import Device, VideoCapture
from gpiozero import CPUTemperature
from evdev import InputDevice
from collections import deque
from threading import Thread
from time import time

from Constants import *
from ELM327 import ELM327

# camera index by device mapper path
usb_capture_id_path="/dev/v4l/by-id/usb-MACROSIL_AV_TO_USB2.0-video-index0"
usb_capture_real_path = os.path.realpath(usb_capture_id_path)
assert usb_capture_id_path != usb_capture_real_path
cameraIndex = int(usb_capture_real_path.split("video")[-1])
# communications between threads:
sidebar_queue = SimpleQueue()

# communications between processes:
dash_pipe1, dash_pipe2 = Pipe()
backup_pipe1, backup_pipe2 = Pipe()
save_pipe1, save_pipe2 = Pipe()


psi_list = deque(maxlen=PSI_BUFFER_DEPTH)

show_graph = False
view_flag = False
exit_flag = False
HIGH_TEMP = 55.0

def _sidebar_hot(): # turns red over 55C
    logger.warning(f"temp over {int(HIGH_TEMP)}C")
    _change_sidebar(COLOR_REC)
def _change_sidebar(color=COLOR_LOW):
    global sidebar_base
    sidebar_base=np.full((SIDEBAR_HEIGHT,SIDEBAR_WIDTH,2),color,np.uint8)
_change_sidebar()

# Background pi temperature monitoring
intemp = CPUTemperature(threshold=HIGH_TEMP,event_delay=1.9)
intemp.when_activated = _sidebar_hot
intemp.when_deactivated = _change_sidebar

# Display frame buffer memory mapped with numpy
frame_buffer = np.memmap("/dev/fb0",dtype='uint8',shape=(SCREEN_HEIGHT,SCREEN_WIDTH,2))
frame_buffer[:160,-SIDEBAR_WIDTH:] = sidebar_base
frame_buffer[:] = np.fromfunction(
    (lambda i,j,k: (np.uint8(j*i*2&(i-199-j)>>8*k))),(480,1600,2),dtype=np.uint8)

# load private bluetooth MAC address for my phone
with open("/root/.btmac","r") as file: mac = file.readline()

def _show_message(text,loc=(500,250),color=COLOR_LAYM,fontScale=3,thickness=4,width=SIDEBAR_WIDTH):
    frame_buffer[:,:-width] = putText(frame_buffer[:,:-width], text, loc, color,
                                      fontScale=fontScale, thickness=thickness)
_show_message("Initializing", (500,250))

def _wifi_state():
    return bash('cat /sys/class/net/wlan0/operstate').stdout == b'up\n'

def data():
    global exit_flag
    global view_flag
    global show_graph
    car_connection, touch_input_device, x = None, None, None
    bt_time = time() + 5
    touch_time = time() + 0.19
    started_names = []

    try: frame_buffer[160:,-SIDEBAR_WIDTH:] = cv.cvtColor(
        cv.imread("/root/newSidebar.png")[1:],BGR565)
    except: logger.warning("couldn't find sidebar!")
    try: # is the wifi connected?
        if _wifi_state(): pass # raise KeyboardInterrupt("wifi connected")
        else: bash('ip link set wlan0 down') # else turn off radio to save power
        for function, name in [(get_dash_image,"dash"),
                               (get_image,"read"),
                              # (on_screen,"show"),
                               (save_video,"save")]:
            Process(target=function, name=name, daemon=True).start()
            started_names.append(name)
        _show_message("Initializing...", (500,250))
        logger.info(f'processes started: {started_names}')
        touch_dev_path = "/dev/input/by-id/usb-HQEmbed_Multi-Touch-event-if00"
        while not exit_flag:
            car_connection = ELM327()
            Thread(target=on_screen, name="show", daemon=True).start()
            while not exit_flag:
                make_sidebar(car_connection.psi())
                if exit_flag: break
                if time() > touch_time:
                    try:
                        if touch_input_device is None: touch_input_device = InputDevice(touch_dev_path)
                        for event in touch_input_device.read():
                            if event.type == 3:
                                if event.code == 0:
                                    if event.value > FINAL_IMAGE_WIDTH: x = event.value
                                    else: view_flag = not view_flag
                                else:
                                    if x is not None and event.code == 1:
                                        if event.value > SCREEN_HEIGHT/2:
                                            msg = f'touch input(X ⇁,Y ⇃) -> {x},{event.value}'
                                            logger.info(msg)
                                            raise KeyboardInterrupt()
                                        else: show_graph = not show_graph
                                    x = None
                    except BlockingIOError: pass # no new input
                    except (OSError, FileNotFoundError): # janky mcu is ailing
                        if touch_input_device is not None:
                            touch_input_device.close()
                            touch_input_device = None
                        touch_time = time() + 0.38
                if bt_time is not None and time() > bt_time:
                    bash(f"bluetoothctl connect {mac}")
                    bt_time = None
            if exit_flag: break
    except KeyboardInterrupt: exit_flag = True
    except Exception as ex:
        traceback.print_exc()
        logger.exception(ex)
    finally: leave(car_connection, touch_input_device)

def leave(car_connection, touch_input_device):
    global exit_flag
    if not exit_flag: exit_flag = True
    if touch_input_device is not None: touch_input_device.close()
    if car_connection  is not None: car_connection.close()
    if not _wifi_state(): Popen("shutdown -h now",shell=True) # bash('ip link set wlan0 up')
    bash(f"bluetoothctl disconnect {mac}")


def make_sidebar(psi, sidebar_queue=sidebar_queue):
    global psi_list
    try:
        entry = max(FDIM[1] - 2 * PPPSI - 15 - int(psi*PPPSI),1)
        psi_list.append(entry)
        sidebar = sidebar_base.copy()
        sidebar = \
                putText(sidebar, f"{psi:.1f}",(4,57), color=COLOR_NORMAL, fontScale=1.19, thickness=3)
        sidebar = putText(sidebar, "BAR" if psi < 0.0 else "PSI", (42,95), color=COLOR_BAD)
        sidebar_queue.put(sidebar)
    except Exception as e: logger.exception(e)

def on_screen(back_pipe=backup_pipe1,dash_pipe=dash_pipe1): # display_queue=display_queue,
    global exit_flag
    global view_flag
    global show_graph
    _show_message("Initializing", (500,250))
    check_time = time() + 5
    current_view = view_flag
    while not exit_flag:
        try:
            if back_pipe.poll(0.057): image = back_pipe.recv()
            else: raise Empty # image = display_queue.get(timeout=0.057)
            if current_view != view_flag:
                if view_flag: dash_pipe.send("START")
                else: dash_pipe.send("STOP")
                current_view = view_flag
            if view_flag:
                if dash_pipe.poll(0.119): dash_image = dash_pipe.recv()
                image = output_alt(image,dash_image)
            else: image = build_output_image(image)
            if show_graph: image = addOverlay(image)
            image = cv.cvtColor(image, BGR565)
            if exit_flag: break
        except Empty:
            if time() > check_time: logger.error("dropped frame!")
        except Exception as e: logger.exception(e)
        else:
           # display_queue.task_done()
            display_image(image)
        if exit_flag: break
    dash_pipe.close()
    back_pipe.close()

def display_image(image, queue=sidebar_queue):
    try:
        frame_buffer[:,:-SIDEBAR_WIDTH] = image
        try: frame_buffer[:SIDEBAR_HEIGHT,-SIDEBAR_WIDTH:] = queue.get(block=False)
        except Empty: pass
        if show_graph: build_graph(psi_list.copy())
        frame_buffer.flush()
    except Exception as e: logger.exception(e)

def build_graph(graph_list, depth=PSI_BUFFER_DEPTH):
    coordinates=np.column_stack((np.array(graph_list),np.arange(depth-len(graph_list)+1,depth+1)))
    for i in range(4): frame_buffer[coordinates[:,0]-1+i//2, coordinates[:,1]-1+i%2] = (0xf8,0)
    for i in range(1,4): frame_buffer[coordinates[:,0]+i//2, coordinates[:,1]+i%2] = (0x30,0x21)

def get_image(pipe=backup_pipe2): # display_queue=display_queue,
    logger = logging.getLogger()
    width, height = DIM
    read_fail_count = 0
    camera = None
    while True:
        try:
            camera = get_camera(cameraIndex,width,height)
            camera.read()
            while camera.isOpened():
                success, image = camera.read()
                if success:
                    try: pipe.send(image)
                    except BrokenPipeError: break
                else: read_fail_count += 1
            if pipe.poll(): pipe.recv()
        except EOFError: break
        except Exception as e: logger.exception(e)
        finally:
            if camera: camera.release()
    pipe.close()

def get_dash_image(width=DASHCAM_IMAGE_WIDTH, height=DASHCAM_IMAGE_HEIGHT, video_format="MJPG",
                   main_pipe=dash_pipe2, save_pipe=save_pipe1):
    logger = logging.getLogger()
    camPath = "/dev/v4l/by-id/usb-Sonix_Technology_Co.__Ltd._USB_CAMERA_SN0001-video-index0"
    exit_flag = False
    view_flag = False
    while not exit_flag:
        try:
            with Device.from_id(extract_index(camPath)) as cam:
                video_capture = VideoCapture(cam)
                video_capture.set_format(width,height,video_format)
                with video_capture as stream:
                    for frame in stream: # dashcam_queue.join()
                        if exit_flag: break
                        if video_format == "MJPG": image = cv.imdecode(frame.array, COLOR)
                        else: image = cv.cvtColor(frame.array.reshape(height, width, 2), YUYV)
                        try: save_pipe.send(image) # dashcam_queue.put(image)
                        except Full: logger.error("dash queue full!")
                        if main_pipe.poll():
                            msg = main_pipe.recv()
                            if msg == "STOP": view_flag = False
                            elif msg  == "START": view_flag = True
                            else: logger.error(f"bad message from main process: {msg}")
                        if view_flag:
                            main_pipe.send(image.copy())
        except EOFError: break
        except Exception as e: logger.exception(e)
    main_pipe.close()
    save_pipe.close()

def save_video(pipe=save_pipe2, camera=None, width=DASHCAM_IMAGE_WIDTH,
               height=DASHCAM_IMAGE_HEIGHT, fps=15): # queue=dashcam_queue,
    logger = logging.getLogger()
    fourcc = cv.VideoWriter_fourcc(*'H264')
    while True:
        output = None
        try:
            output = cv.VideoWriter(get_video_path(camera), fourcc, fps, (width, height))
            while True:
                if pipe.poll(0.119): 
                    image = pipe.recv()
                   # if speed: pass # (speed,frame_num) -> csv file
                    if image is not None: output.write(image)
                    else: print("empty image!")
                else: logger.error("no dash video to save!")
        except EOFError: break
        except Exception as e: logger.exception(e)
        finally:
            if output is not None: output.release()
    pipe.close()

if __name__ == "__main__":
    set_start_method('spawn') # ,force=True)
    fmtString = '%(asctime)s[%(levelname)-4s]%(threadName)s: %(message)s'
    handler = logging.FileHandler("/root/runtime-carCam.log")
    level = logging.DEBUG
    handler.setLevel(level)
    handler.setFormatter(logging.Formatter(fmtString))
    logger = logging.getLogger()
    logger.setLevel(level)
    logger.addHandler(handler) # turn off red LED \/  \/
    bash('echo none > /sys/class/leds/PWR/trigger; echo 0 > /sys/class/leds/PWR/brightness')
    data()
