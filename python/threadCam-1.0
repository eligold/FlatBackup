#!/usr/bin/env python3
import os, traceback, cv2, logging, numpy as np
from subprocess import run, Popen, PIPE
from signal import SIGINT
from threading  import Thread
from queue import Empty, Full, SimpleQueue
from time import sleep, time, localtime, perf_counter
from ELM327 import ELM327
from bv import bv_ViewBuilder as ViewBuilder

DASHCAM_FPS = 15
DASHCAM_IMAGE_WIDTH = 2592
DASHCAM_IMAGE_HEIGHT = 1944
FINAL_IMAGE_WIDTH = 1480
FINAL_IMAGE_HEIGHT = 480
DIM = (720,576) # PAL video dimensions
SDIM = (960,768)
FDIM = (1040,FINAL_IMAGE_HEIGHT)

COLOR_REC = 0xfa00 # 0x58
COLOR_GOOD = 0x871a
COLOR_LOW = 0xc4e4
COLOR_BAD = 0x8248
COLOR_NORMAL = 0x19ae
COLOR_LAYM = 0xbfe4
FPS = cv2.CAP_PROP_FPS
CUBIC = cv2.INTER_CUBIC
FORMAT = cv2.CAP_PROP_FOURCC
WIDTH = cv2.CAP_PROP_FRAME_WIDTH
HEIGHT = cv2.CAP_PROP_FRAME_HEIGHT

# below values are specific to my backup camera run thru my knock-off easy-cap calibrated with my
K = np.array([                                                               # phone screen. YMMV
        [309.41085232860985,                0.0, 355.4094868125207],
        [0.0,                329.90981352161924, 292.2015284112677],
        [0.0,                               0.0,               1.0]])
D = np.array([
    [0.013301372417500422],
    [0.03857464918863361],
    [0.004117306147228716],
    [-0.008896442339724364]])
# calculate camera values to undistort image
new_K = cv2.fisheye.estimateNewCameraMatrixForUndistortRectify(K, D, DIM, np.eye(3), balance=1)
mapx, mapy = cv2.fisheye.initUndistortRectifyMap(K, D, np.eye(3), new_K, DIM, cv2.CV_32FC1)

processing_queue = SimpleQueue()
display_queue = SimpleQueue()
sidebar_queue = SimpleQueue()

sidebar_base = np.full((FINAL_IMAGE_HEIGHT,120),COLOR_LOW,np.uint16)
for i in range(160,FINAL_IMAGE_HEIGHT):
    for j in range(120):
        sidebar_base[i][j] = np.uint16(i*2&(i-255-j))

no_signal_frame = cv2.putText(
    np.full((FINAL_IMAGE_HEIGHT,FINAL_IMAGE_WIDTH),COLOR_BAD,np.uint16),
    "No Signal!",(500,200), cv2.FONT_HERSHEY_SIMPLEX, 1, (0xc4,0xe4), 2, cv2.LINE_AA)

exit_flag = False

def bash(cmd:str,shell=True,capture_output=True,check=False):
    try:
        return run(cmd,shell=shell,capture_output=capture_output,check=check)
    except Exception as e:
        traceback.print_exc()
        logger.exception(e)

def unabashed(cmd:str,shell=True,stdout=PIPE,stderr=PIPE):
    return Popen(cmd,shell=shell,stdout=stdout,stderr=stderr)

def main():
    global exit_flag # signal for threads to end
    global display_queue, processing_queue, panel_queue
    wifi_flag = False
    threads = []
    with open("/root/.btmac","r") as file:
        mac = file.readline()
    bluetoothctl_lines = [
            'bluetoothctl << EOF',
            f'connect {mac}',
           # f'info {mac}',
            'EOF']
    bluetooth_process = None
    dashcam_process = None
    touch_command = 'evtest /dev/input/by-id/usb-HQEmbed_Multi-Touch-event-if00'
    try: # is the wifi connected?
        wifi_process = bash('cat /sys/class/net/wlan0/operstate')
        if wifi_process.stdout == b'up\n':
            pass # raise KeyboardInterrupt("wifi connected")
        else: # turn off radio, no need to waste power
            wifi_flag = unabashed('ip link set wlan0 down').wait() == 0
        bluetooth_process = unabashed(f"bluetoothctl connect {mac}") # '\n'.join(bluetoothctl_lines))
        for function, name in [
                (sidebar_builder,"sdbr"),
                (undistort_and_panelize,"proc"),
                (on_screen,"show"),
                (get_image,"read")]:
            thread = Thread(target=function,name=name)
            thread.start()          # start each thread
            threads.append(thread)  # store them for termination later
            logger.info(f"started thread {name}")
        stdout = None
        touch_process = None
        ret = bluetooth_process.wait()
        for bt_line in bluetooth_process.stdout.readlines():
            logger.info(bt_line.decode())
        logger.info("Bluetooth success?" if ret == 0 else f"BT return code: {ret}")
        dashcam_process = start_dash_cam()
        while not exit_flag:
            try:
                touch_process = unabashed(touch_command)
                stdout = touch_process.stdout
                while not exit_flag:
                    line = stdout.readline().decode()
                    if("POSITION_X" in line and "value" in line):
                        x = int(line.split("value")[-1])
                        if x >= FINAL_IMAGE_WIDTH:
                            line = stdout.readline().decode()
                            y = int(line.split("value")[-1])
                            if y > 239:
                                logger.warning(f'exit:\ttouch input ( X: > , Y: v ) {x} , {y}')
                                exit_flag = True
                    if exit_flag: break
                    if dashcam_process.returncode == 0:
                        for dash_line in dashcam_process.stdout.readlines():
                            logger.info(dash_line.decode())
                        logger.info(f"dashcam command exit code: {dashcam_process.returncode}")
                        if exit_flag: break
                        dashcam_process = start_dash_cam()
            except Exception as e:
                logger.exception(e)
    except Exception as ex:
        exit_flag = True
        traceback.print_exc()
        logger.exception(ex)
    finally:
        logger.info(f"proc: {processing_queue.qsize()}\tdisp: {display_queue.qsize()}")
        exit_flag = True
        if stdout:
            stdout.close()
        if touch_process:
            touch_process.terminate()
        if dashcam_process:
            dashcam_process.terminate()
        if wifi_flag:
        # manage BT conn here maybe
            bash('ip link set wlan0 up',check=False)
        for thread in threads:
            thread.join()

def undistort_and_panelize():
    global processing_queue, display_queue
    empty_counter = 0
    vb = ViewBuilder()
    while not exit_flag:
        try:
            image = processing_queue.get(timeout=0.08)
            try:
                display_queue.put(vb.build(image))
                image = None
            except Full:
                logger.error("disp queue full?")
            image = None
        except Empty:
            empty_counter += 1
    logger.info(f"empty exc count: {empty_counter}")

def on_screen():
    global display_queue, sidebar_queue
    empty_counter = 0
    while not exit_flag:
        try:
            sidebar = sidebar_base
            with open('/dev/fb0','rb+') as frame_buffer:
                while True:
                    try:
                        image = display_queue.get(timeout=0.04)
                        for i in range(FINAL_IMAGE_HEIGHT):
                            frame_buffer.write(image[i])
                            frame_buffer.write(sidebar[i])
                        frame_buffer.seek(0)
                    except Empty:
                        empty_counter += 1
                    image = None                            # HI IM HERE
                    try:
                        sidebar = sidebar_queue.get(block=False)
                    except Empty:
                        pass
                    if exit_flag: break
        except Exception as e:
            traceback.print_exc()
            logger.exception(e)
        if exit_flag: break
    logger.info(f"empty exc count: {empty_counter}")

def get_image():
    global processing_queue
    width, height = DIM
    usb_capture_id_path="/dev/v4l/by-id/usb-MACROSIL_AV_TO_USB2.0-video-index0"
    image = None
    read_fail_count = 0
    while not exit_flag:
        try:
            usb_capture_real_path = os.path.realpath(usb_capture_id_path)
            if usb_capture_id_path == usb_capture_real_path:
                logger.error("camera not found!\twaiting...")
                sleep(2)
            else:
                logger.info(f"{usb_capture_id_path} -> {usb_capture_real_path}")
                index = int(usb_capture_real_path.split("video")[-1])
                camera = get_camera(index,width,height)
                size = (int(camera.get(WIDTH)), int(camera.get(HEIGHT)))
                fps = (int(camera.get(FPS)))
                logger.info(f"camera resolution: {size[0]}x{size[1]}\t@ {fps}FPS")
                camera.read()
                try:
                    while camera.isOpened():
                        if exit_flag: break
                        success, image = camera.read()
                        if success:
                            try:
                                processing_queue.put(image)
                            except Full:
                                logger.error("proc queue full?")
                        else:
                            read_fail_count += 1
                finally:
                    logger.info("release camera resource")
                    camera.release()
        except Exception as e:
            traceback.print_exc()
            logger.exception(e)
    logger.info(f"UVC read fail count: {read_fail_count}")

def sidebar_builder():
    global sidebar_queue
    while not exit_flag:
        try:
            elm = ELM327()
            while not exit_flag:
                sidebar = sidebar_base.copy()
                psi = elm.psi()
                sidebar = putText(
                        sidebar,f"{psi:.1f}",(4,57),color=COLOR_NORMAL,fontScale=1.19,thickness=3)
                sidebar = putText(sidebar,"BAR" if psi < 0.0 else "PSI",(60,95),color=COLOR_BAD)
                sidebar_queue.put(sidebar)
        except Exception as e:
            traceback.print_exc()
            logger.exception(e)
        finally:
            elm.close()
        if exit_flag: break
        else: sleep(2)

def dash_camera():
    dashcam_process = None
    try:
        try:
            dashcam_process = start_dash_cam()
            while not exit_flag:
                if dashcam_process.returncode is None:
                    sleep(0.19)
                else:
                    if dashcam_process.returncode == 0:
                        dashcam_process = start_dash_cam()
                    else:
                        raise Exception(f"dashcam process exit code {dashcam_process.returncode}")
        except Exception as e:
            logger.exception(e)
    finally:
        if dashcam_process:
            dashcam_process.terminate()

def start_dash_cam(): # sets camera attributes for proper output size and format before running
    runtime = DASHCAM_FPS * 60 * 30
    camPath = "/dev/v4l/by-id/usb-Sonix_Technology_Co.__Ltd._USB_CAMERA_SN0001-video-index0"
    format = f"width={DASHCAM_IMAGE_WIDTH},height={DASHCAM_IMAGE_HEIGHT},pixelformat=MJPG"
    bash(f"v4l2-ctl -d {camPath} -v {format}",check=False)
    local_time = localtime()
    date = f"{local_time.tm_year}-{local_time.tm_mon:02d}-{local_time.tm_mday:02d}"
    clock_time = f"{local_time.tm_hour:02d}.{local_time.tm_min:02d}.{local_time.tm_sec:02d}"
    weekday = (lambda i : ['Mo','Tu','We','Th','Fr','Sa','Su'][i])(local_time.tm_wday)
    filepath = f"/media/usb/{'_'.join([date,clock_time,weekday])}.mjpeg"
    cmd = f"v4l2-ctl -d {camPath} --stream-mmap=3 --stream-count={runtime} --stream-to={filepath}"
    return unabashed(cmd)

def get_camera(camIndex:int,width,height,apiPreference=cv2.CAP_V4L2,brightness=25) -> cv2.VideoCapture:
    camera = cv2.VideoCapture(camIndex,apiPreference=apiPreference)
    camera.set(WIDTH,width)
    camera.set(HEIGHT,height)
    camera.set(cv2.CAP_PROP_BRIGHTNESS,brightness)
    return camera

def undistort(image):
    # image = ; return image?
    return cv2.remap(image,mapx,mapy,interpolation=CUBIC)

def build_reverse_view(img):
    image = cv2.UMat(cv2.resize(img,SDIM,interpolation=CUBIC),[64,556])
    middle = cv2.resize(cv2.UMat(image,[213,453],[220,740]),FDIM,interpolation=CUBIC)
    combo = cv2.hconcat([cv2.UMat(image,[8,488],[0,220]),middle,cv2.UMat(image,[0,480],[740,960])])
    return cv2.cvtColor(combo,cv2.COLOR_BGR2BGR565)

def putText(img, text, origin=(0,480), #bottom left
            color=(0xc5,0x9e,0x21),fontFace=cv2.FONT_HERSHEY_SIMPLEX,
            fontScale=1,thickness=2,lineType=cv2.LINE_AA):
    return cv2.putText(img,text,origin,fontFace,fontScale,color,thickness,lineType)

if __name__ == "__main__":
    handler = logging.FileHandler("/root/runtime-carCam.log")
    handler.setLevel(logging.INFO)
    handler.setFormatter(logging.Formatter('%(asctime)s[%(levelname)-4s]%(threadName)s: %(message)s'))
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)
    bash('echo none > /sys/class/leds/PWR/trigger')
    bash('echo 0 > /sys/class/leds/PWR/brightness') # turn off red LED
    main()
